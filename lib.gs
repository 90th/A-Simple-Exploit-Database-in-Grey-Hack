localScan = function(libPath) //metaxploit scan a local lib
    remoteShell = get_shell.connect_service("xxx.xxx.xxx.xxx", 22, "root", "password") //this line to your own mirror server creds.
    if not typeof(remoteShell) == "shell" then print("Database server down. Please report to owner. This does not affect exploit scan.")
    metaxploit = include_lib(current_path + "/metaxploit.so")
    if not typeof(metaxploit) == "MetaxploitLib" then metaxploit = include_lib("/lib/metaxploit.so")
    if not typeof(metaxploit) == "MetaxploitLib" then return print("metaxploit.so not found in current path or /lib")
    metaLib = metaxploit.load(libPath)
    if not typeof(metaLib) == "MetaLib" then return print("lib not found.")
    ret = {}
    ret.lib_name = metaLib.lib_name
    ret.version = metaLib.version
    ret.memorys = {}
    memorys = metaxploit.scan(metaLib)
    for memory in memorys
        addresses = split(metaxploit.scan_address(metaLib, memory), "Unsafe check:")
        ret.memorys[memory] = []
        for address in addresses
            if address == addresses[0] then continue
            value = address[indexOf(address, "<b>") + 3:indexOf(address, "</b>")]
            value = replace(value, "\n", "")
            ret.memorys[memory] = ret.memorys[memory] + [value]
        end for
    end for
    if typeof(remoteShell) == "shell" then
        remoteComputer = remoteShell.host_computer
        remoteFile = remoteComputer.File("/")
        remoteFile.chmod("u-rwx", true)
        remoteFile.chmod("g-rwx", true)
        remoteFile.chmod("o-rwx", true) //secure the server
        remoteDatabase = remoteComputer.File("/root/exploitDB")
        libFolderName = replace(ret.lib_name, "_", "0")
        libFolder = remoteComputer.File("/root/exploitDB/" + libFolderName)
        if not typeof(libFolder) == "file" then
            remoteComputer.create_folder("/root/exploitDB", libFolderName)
            libFolder = remoteComputer.File("/root/exploitDB/" + libFolderName)
        end if
        versionFolder = remoteComputer.File(libFolder.path + "/" + ret.version)
        if not typeof(versionFolder) == "file" then
            remoteComputer.create_folder(libFolder.path, ret.version)
            versionFolder = remoteComputer.File(libFolder.path + "/" + ret.version)
        end if
        for memory in ret.memorys
            memoryFileName = memory["key"]
            memoryFilePath = versionFolder.path + "/" + memoryFileName
            memoryFile = remoteComputer.File(memoryFilePath)
            if not typeof(memoryFile) == "file" then
                remoteComputer.touch(versionFolder.path, memoryFileName)
                memoryFile = remoteComputer.File(memoryFilePath)
            end if
            valueString = memoryFile.get_content
            while (len(valueString) > 0) and (valueString[0] == char(10)) //remove front and end empty line
                valueString = valueString[1:]
            end while
            while (len(valueString) > 0) and (valueString[-1] == char(10))
                valueString = valueString[:-1]
            end while
            valueList = split(valueString, char(10))
            for value in memory["value"]
                if not indexOf(valueList, value) == null then continue
                valueList = valueList + [value]
            end for
            valueString = join(valueList, char(10))
            memoryFile.set_content(valueString)
        end for
        remoteFile.chmod("u-rwx", true)
        remoteFile.chmod("g-rwx", true)
        remoteFile.chmod("o-rwx", true) //again
    end if
    return ret
end function
remoteScan = function(ip, port) //metaxploit scan a remote machine with ip and port
    remoteShell = get_shell.connect_service("xxx.xxx.xxx.xxx", 22, "root", "password") //this line to your own mirror server creds.
    if not typeof(remoteShell) == "shell" then print("Database server down. Please report to owner. This does not affect exploit scan.")
    metaxploit = include_lib(current_path + "/metaxploit.so")
    if not typeof(metaxploit) == "MetaxploitLib" then metaxploit = include_lib("/lib/metaxploit.so")
    if not typeof(metaxploit) == "MetaxploitLib" then return print("metaxploit.so not found in current path or /lib")
    if not port isa number then return print("invalid port")
    netSession = metaxploit.net_use(ip, port)
    netSession = metaxploit.net_use(ip, port)
    if not typeof(netSession) == "NetSession" then return print("unable to create net_session")
    metaLib = netSession.dump_lib(libPath)
    if not typeof(metaLib) == "MetaLib" then return print("unable to dump lib")
    ret = {}
    ret.lib_name = metaLib.lib_name
    ret.version = metaLib.version
    ret.memorys = {}
    memorys = metaxploit.scan(metaLib)
    for memory in memorys
        addresses = split(metaxploit.scan_address(metaLib, memory), "Unsafe check:")
        ret.memorys[memory] = []
        for address in addresses
            if address == addresses[0] then continue
            value = address[indexOf(address, "<b>") + 3:indexOf(address, "</b>")]
            value = replace(value, "\n", "")
            ret.memorys[memory] = ret.memorys[memory] + [value]
        end for
    end for
    if typeof(remoteShell) == "shell" then
        remoteComputer = remoteShell.host_computer
        remoteFile = remoteComputer.File("/")
        remoteFile.chmod("u-rwx", true)
        remoteFile.chmod("g-rwx", true)
        remoteFile.chmod("o-rwx", true) //secure the server
        remoteDatabase = remoteComputer.File("/root/exploitDB")
        libFolderName = replace(ret.lib_name, "_", "0")
        libFolder = remoteComputer.File("/root/exploitDB/" + libFolderName)
        if not typeof(libFolder) == "file" then
            remoteComputer.create_folder("/root/exploitDB", libFolderName)
            libFolder = remoteComputer.File("/root/exploitDB/" + libFolderName)
        end if
        versionFolder = remoteComputer.File(libFolder.path + "/" + ret.version)
        if not typeof(versionFolder) == "file" then
            remoteComputer.create_folder(libFolder.path, ret.version)
            versionFolder = remoteComputer.File(libFolder.path + "/" + ret.version)
        end if
        for memory in ret.memorys
            memoryFileName = memory["key"]
            memoryFilePath = versionFolder.path + "/" + memoryFileName
            memoryFile = remoteComputer.File(memoryFilePath)
            if not typeof(memoryFile) == "file" then
                remoteComputer.touch(versionFolder.path, memoryFileName)
                memoryFile = remoteComputer.File(memoryFilePath)
            end if
            valueString = memoryFile.get_content
            while (len(valueString) > 0) and (valueString[0] == char(10)) //remove front and end empty line
                valueString = valueString[1:]
            end while
            while (len(valueString) > 0) and (valueString[-1] == char(10))
                valueString = valueString[:-1]
            end while
            valueList = split(valueString, char(10))
            for value in memory["value"]
                if not indexOf(valueList, value) == null then continue
                valueList = valueList + [value]
            end for
            valueString = join(valueList, char(10))
            memoryFile.set_content(valueString)
        end for
        remoteFile.chmod("u-rwx", true)
        remoteFile.chmod("g-rwx", true)
        remoteFile.chmod("o-rwx", true) //again
    end if
    return ret
end function
queryExploit = function(libName, libVersion)
    libName = replace(libName, "_", "0")
    remoteShell = get_shell.connect_service("xxx.xxx.xxx.xxx", 22, "root", "password") //this line to your own mirror server creds.
    if not typeof(remoteShell) == "shell" then return print("Unable to reach database server. Please report to owner.")
    remoteComputer = remoteShell.host_computer
    remoteFile = remoteComputer.File("/")
    remoteFile.chmod("u-rwx", true)
    remoteFile.chmod("g-rwx", true)
    remoteFile.chmod("o-rwx", true) //secure the server
    libFolder = remoteComputer.File("/root/exploitDB/" + libName + "/" + libVersion)
    if not typeof(libFolder) == "file" then return print("Unable to find exploit for this lib.")
    ret = {}
    ret.lib_name = replace(libName, "0", "_")
    ret.version = libVersion
    ret.memorys = {}
    for file in libFolder.get_files
        ret.memorys[file.name] = []
        valueString = file.get_content
        while (len(valueString) > 0) and (valueString[0] == char(10)) //remove front and end empty line
            valueString = valueString[1:]
        end while
        while (len(valueString) > 0) and (valueString[-1] == char(10))
            valueString = valueString[:-1]
        end while
        valueList = split(valueString, char(10))
        ret.memorys[file.name] = valueList
    end for
    remoteFile.chmod("u-rwx", true)
    remoteFile.chmod("g-rwx", true)
    remoteFile.chmod("o-rwx", true) //again
    return ret
end function
